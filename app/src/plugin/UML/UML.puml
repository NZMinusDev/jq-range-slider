@startuml
class EventManagerMixin<TEvents extends string> {
    #_eventHandlers: { [key: string]: Handler[]; }
    +on(eventName: TEvents, eventHandler: Handler): this
    +off(eventName: TEvents, eventHandler: (...args: any) => void): this
    +trigger(eventName: TEvents, args: any): this
    +handleEvent(event: Event): this
}
abstract class MVPView<TOptionsToGet extends Record<string, unknown>, TOptionsToSet extends Record<string, unknown>, TState extends Record<string, unknown>, TEvents extends string> extends EventManagerMixin {
    +{abstract} template: Template
    #_options: TOptionsToGet
    #_state: TState
    #_theOrderOfIteratingThroughTheOptions: Extract<keyof TOptionsToGet, string>[]
    #_theOrderOfIteratingThroughTheState: Extract<keyof TState, string>[]
    +getOptions(): TOptionsToGet
    +setOptions(options?: TOptionsToSet | undefined): this
    +remove(): this
    #_setState(state?: Partial<TState> | undefined): this
    #_fixOptions(): this
    #_fixState(): this
    #_render(): this
    +{static} templateOfRemoving: () => TemplateResult
}
interface MVPModel<State> {
    +getState(): Promise<Required<State>>
    +setState(state?: Partial<State> | undefined): Promise<this>
    +whenStateIsChanged(callback: (state: Required<State>) => void): void
    +closeConnections(): this
}
interface IRangeSliderModel extends MVPModel
interface ITrackView extends MVPView {
    +getIntervalsOption(): { [key: string]: number; min: number; max: number; }
    +getStepsOption(): (number | "none")[]
    +getPaddingOption(): [number, number]
    +setIntervalsOption(intervals?: { [key: string]: number; min: number; max: number; } | undefined): this
    +setStepsOption(steps?: number | "none" | (number | "none")[] | undefined): this
    +setPaddingOption(padding?: number | [number, number] | undefined): this
}
interface IRangeView extends MVPView {
    +getIsConnectedOption(): boolean | undefined
    +setIsConnectedOption(connect?: boolean | undefined): this
}
interface ITooltipView extends MVPView {
    +getOrientationOption(): "top" | "left" | undefined
    +getIsHiddenOption(): boolean | undefined
    +getFormatterOption(): Formatter | undefined
    +setOrientationOption(orientation: "top" | "left" | undefined): this
    +setIsHiddenOption(isHidden?: boolean | undefined): this
    +setFormatterOption(formatter?: Formatter | undefined): this
}
interface IPipsView extends MVPView {
    +getOrientationOption(): "horizontal" | "vertical" | undefined
    +getIsHiddenOption(): boolean | undefined
    +getValuesOption(): { percent: number; value: number; }[] | undefined
    +getDensityOption(): number | undefined
    +getFormatterOption(): Formatter | undefined
    +setOrientationOption(orientation?: "horizontal" | "vertical" | undefined): this
    +setIsHiddenOption(isHidden?: boolean | undefined): this
    +setValuesOption(values?: { percent: number; value: number; }[] | undefined): this
    +setDensityOption(density?: number | undefined): this
    +setFormatterOption(formatter?: Formatter | undefined): this
}
interface IRangeSliderView extends MVPView {
    +getIntervalsOption(): { [key: string]: number; min: number; max: number; }
    +getStartOption(): number[]
    +getStepsOption(): (number | "none")[]
    +getConnectOption(): boolean[]
    +getOrientationOption(): "horizontal" | "vertical"
    +getPaddingOption(): [number, number]
    +getFormatterOption(): Formatter
    +getTooltipsOption(): (boolean | Formatter)[]
    +getPipsOption(): Required<Omit<PipsOptions, "orientation" | "formatter" | "values"> & { mode?: Mode | undefined; values?: number | number[] | undefined; }>
    +setIntervalsOption(intervals?: { [key: string]: number; min: number; max: number; } | undefined): this
    +setStartOption(start?: number | number[] | undefined): this
    +setStepsOption(steps?: number | "none" | (number | "none")[] | undefined): this
    +setConnectOption(connect?: boolean | boolean[] | undefined): this
    +setOrientationOption(orientation?: "horizontal" | "vertical" | undefined): this
    +setPaddingOption(padding?: number | [number, number] | undefined): this
    +setFormatterOption(formatter?: Formatter | undefined): this
    +setTooltipsOption(tooltips?: boolean | (boolean | Formatter)[] | undefined): this
    +setPipsOption(pips?: (Omit<PipsOptions, "orientation" | "formatter" | "values"> & { mode?: Mode | undefined; values?: number | number[] | undefined; }) | undefined): this
    +get(): number[]
    +set(value?: number | number[] | undefined): this
}
interface IThumbView extends MVPView
class TrackView extends MVPView implements ITrackView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }, innerHTML?: TemplateResult | TemplateResult[]) => TemplateResult
    +getOrientationOption(): "horizontal" | "vertical"
    +getIntervalsOption(): { [x: string]: number; min: number; max: number; }
    +getStepsOption(): (number | "none")[]
    +getPaddingOption(): [number, number]
    +setOrientationOption(orientation?: "horizontal" | "vertical" | undefined): this
    +setIntervalsOption(intervals?: { [key: string]: number; min: number; max: number; } | undefined): this
    +setStepsOption(steps?: number | "none" | (number | "none")[] | undefined): this
    +setPaddingOption(padding?: number | [number, number] | undefined): this
    #_fixIntervalsOption(): this
    #_fixOrderOfIntervalsOption(): this
    #_fixKeysOfIntervalsOption(): this
    #_fixValuesOfIntervalsOption(): this
    #_fixStepsOption(): this
    #_fixLengthOfStepsOption(): this
    #_fixValuesOfStepsOption(): void
    #_fixPaddingOption(): this
    #_getSortedKeysOfIntervalsOption(): string[]
    +{static} intervalsKeysCompareFunc(a: string, b: string): number
}
class RangeView extends MVPView implements IRangeView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
    +getIsConnectedOption(): boolean
    +setIsConnectedOption(isConnected?: boolean): this
}
class ThumbView extends MVPView implements IThumbView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }, { innerHTML, isActive }?: { innerHTML: TemplateResult | TemplateResult[]; isActive: boolean; }) => TemplateResult
    #_onDragstart(): boolean
    #{static} ariaAttributePrecision: number
}
class TooltipView extends MVPView implements ITooltipView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
    +getOrientationOption(): "top" | "left"
    +getIsHiddenOption(): boolean
    +getFormatterOption(): Formatter
    +setOrientationOption(orientation?: "top" | "left" | undefined): this
    +setIsHiddenOption(isHidden?: boolean | undefined): this
    +setFormatterOption(formatter?: Formatter | undefined): this
}
class PipsView extends MVPView implements IPipsView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
    +getOrientationOption(): "horizontal" | "vertical"
    +getIsHiddenOption(): boolean
    +getValuesOption(): { percent: number; value: number; }[]
    +getDensityOption(): number
    +getFormatterOption(): Formatter
    +setOrientationOption(orientation?: "horizontal" | "vertical" | undefined): this
    +setIsHiddenOption(isHidden?: boolean | undefined): this
    +setValuesOption(values?: { percent: number; value: number; }[] | undefined): this
    +setDensityOption(density?: number | undefined): this
    +setFormatterOption(formatter?: Formatter | undefined): this
    #_fixValuesOption(): this
    #_fixDensityOption(): this
    #_getPipsRender(): TemplateResult | TemplateResult[]
    #_getMarkersRender(end: number, range: number, positionKey: "top" | "left"): TemplateResult[]
    #_getValueRender(styleInfo: StyleInfo, value: number): TemplateResult
}
class RangeSliderView extends MVPView implements IRangeSliderView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
    +getIntervalsOption(): { [x: string]: number; min: number; max: number; }
    +getStartOption(): number[]
    +getStepsOption(): (number | "none")[]
    +getConnectOption(): boolean[]
    +getOrientationOption(): "horizontal" | "vertical"
    +getPaddingOption(): [number, number]
    +getFormatterOption(): Formatter
    +getTooltipsOption(): (boolean | Formatter)[]
    +getPipsOption(): any
    +setIntervalsOption(intervals?: { [key: string]: number; min: number; max: number; } | undefined): this
    +setStartOption(start?: number | number[] | undefined): this
    +setStepsOption(steps?: number | "none" | (number | "none")[] | undefined): this
    +setConnectOption(connect?: boolean | boolean[] | undefined): this
    +setOrientationOption(orientation?: "horizontal" | "vertical" | undefined): this
    +setPaddingOption(padding?: number | [number, number] | undefined): this
    +setFormatterOption(formatter?: Formatter | undefined): this
    +setTooltipsOption(tooltips?: boolean | (boolean | Formatter)[] | undefined): this
    +setPipsOption(pips?: (Omit<PipsOptions, "orientation" | "formatter" | "values"> & { mode?: Mode | undefined; values?: number | number[] | undefined; }) | undefined): this
    +setOptions(options?: RangeSliderOptions | undefined): this
    +get(): number[]
    +set(value?: number | number[] | undefined): this
    #_setValueState(value?: number[]): this
    #_fixIntervalsOption(): this
    #_fixPaddingOption(): this
    #_fixStartOption(): this
    #_fixStepsOption(): this
    #_fixPipsOption(): this
    #_fixPipsOptionDependOnMode(): void
    #_fixPipsOptionWithIntervalsMode(): void
    #_fixPipsOptionWithCountMode(): void
    #_fixPipsOptionWithPositionsMode(): void
    #_fixPipsOptionWithValuesMode(): void
    #_fixConnectOption(): this
    #_fixTooltipsOption(): this
    #_fixValueState(): this
    #_fixIsActiveThumbsState(): void
    #_getValueBorderOfTrack(): { min: number; max: number; }
    #_getLinearPercentBorderOfTrack(): { min: number; max: number; }
    #_getIntervalInfoByPoint(value: number, __1?: { isIncludedInSupremum?: boolean | undefined; }): { keyOfInfimum: string; keyOfSupremum?: undefined; valueSize?: undefined; percentSize?: undefined; magnificationFactor?: undefined; step?: undefined; } | { keyOfSupremum: string; keyOfInfimum?: undefined; valueSize?: undefined; percentSize?: undefined; magnificationFactor?: undefined; step?: undefined; } | { ...; }
    #_toTrackPercent(valueOnTrack: number): number
    #_toTrackValue(linearPercentOnTrack: number): number
    #_toTrackOptions(): FixedTrackOptions
    #_toRangeOptions(index: number): Required<RangeOptions>
    #_toThumbOptions(index: number): Required<ThumbOptions>
    #_toTooltipOptions(index: number): Required<TooltipOptions>
    #_toPipsOptions(): Required<PipsOptions>
    #_toThumbState(index: number): ThumbState
    #_toTooltipState(index: number): TooltipState
    #_getRangeTransform(index: number): string
    #_getThumbTransform(index: number): string
    #_getThumbZIndex(index: number): string
    #_thumbEventListenerObject: { cache: WeakMap<HTMLElement, { trackElem: HTMLElement; thumbIndex: number; trackValueSize: number; siblingRanges: [HTMLElement, HTMLElement]; valuePerPx: number; movementAcc: number; }>; ... 4 more ...; getOrigin(event: Event): HTMLElement; }
    #_initThumbCache(origin: HTMLElement): { trackElem: HTMLElement; thumbIndex: number; trackValueSize: number; siblingRanges: [HTMLElement, HTMLElement]; valuePerPx: number; movementAcc: number; }
    #_isMoveFromExteriorOfThumb(thumbDOMRect: DOMRect, event: PointerEvent): boolean
    #_fixNonLinearShiftThroughIntervals(currentIntervalInfo: { keyOfInfimum: string; keyOfSupremum: string; magnificationFactor: number; step: number | 'none'; }, thumbValueAfterIncrementation: number, thumbValueIncrementation: number, movement: number, valuePerPx: number): { thumbValueAfterIncrementation: number; theLastIncrement: number; currentIntervalInfo: {    keyOfInfimum: string;    keyOfSupremum: string;    magnificationFactor: number;    step: number | 'none';}; }
    #_thumbValueToPositionOnTrack(thumbIndex: number): { offsetInPercent: number; thumbScaleFactor: number; thumbToCenterOffset: number; }
    #_trackEventListenerObject: { cache: { trackElem: HTMLElement; }; handleEvent: (event: Event) => void; handleTrackClick: (event: MouseEvent) => void; }
    #_getNearestThumb(value: number): number
    #_pipsEventListenerObject: { handleEvent: (event: Event) => void; handlePipsClick: (event: MouseEvent) => void; }
    #{static} _getIntervalKeyAsNumber(key: string | number): number
    #{static} _toThumbSteppedIncrementation(thumbIncrementationOfLastInterval: number, step: number | "none"): { stepped: number; remains: number; }
}
class RangeSliderPresenter {
    +view: IRangeSliderView
    +model?: IRangeSliderModel | undefined
    +setModel(model: IRangeSliderModel, errorCatcher: ErrorCatcher): this
    #handleViewSet: () => void
    #_updateViewDisplay(state: Required<RangeSliderState>): this
    #_initModelViewBinding(): this
}
RangeSliderView "1" --* "1" TrackView : composes template using template of >
RangeSliderView "1" --* "*" RangeView : composes template using templates of >
RangeSliderView "1" --* "*" ThumbView : composes template using templates of >
RangeSliderView "1" --* "*" TooltipView : composes template using templates of >
RangeSliderView "1" --* "1" PipsView : composes template using template of >
RangeSliderPresenter "1" --o "1" IRangeSliderModel : get/set state, listen state update 
RangeSliderPresenter "1" --> "1" IRangeSliderView : supply state (Update)
IRangeSliderModel "1" ..> "1" RangeSliderPresenter : change notification (calls passed to 'whenStateIsChanged' callback which updates view display)
IRangeSliderView "1" ..> "1" RangeSliderPresenter : user action ('set' event)
note left of MVPView::template
  This method can <b>include templates of the others</b> and it's used for efficient rendering
end note
note left of MVPView::_options
  Just options that <b>customize the behavior</b>. Can be set from outside by <b>construcor</b> or <b>setOptions</b> method but <b>immutable inside</b>
end note
note left of MVPView::_state
  Current state of view. Can be set <b>only by constructor</b> and can be <b>changed by user interaction</b>
end note
note left of MVPView::_theOrderOfIteratingThroughTheOptions
  Keys of <b>"_options"</b> property for iteration through <b>"_options"</b> with properly order
end note
note left of MVPView::_theOrderOfIteratingThroughTheState
  Keys of <b>"_state"</b> property for iteration through <b>"_state"</b> with properly order
end note
note left of MVPView::getOptions
  Iterates through <b>"get<key>Option()"</b> methods using <b>"_theOrderOfIteratingThroughTheOptions"</b> property
end note
note left of MVPView::setOptions
  Iterates through <b>"set<key>Option()"</b> methods using <b>"_theOrderOfIteratingThroughTheOptions"</b> property. Also emit <b>"render"</b> event after end of iteration.
end note
note left of MVPView::remove
  Emit <b>"remove"</b> event
end note
note left of MVPView::_setState
  Iterates through <b>"set<key>State()"</b> methods using <b>"_theOrderOfIteratingThroughTheState"</b> property. Also emit <b>"render"</b> event after end of iteration.
end note
note left of MVPView::_fixOptions
  Iterates through <b>"_fix<key>Option()"</b> methods using <b>"_theOrderOfIteratingThroughTheOptions"</b> property
end note
note left of MVPView::_fixState
   Iterates through <b>"_fix<key>State()"</b> methods using <b>"_theOrderOfIteratingThroughTheOptions"</b> property.
end note
note left of MVPView::_render
  Emit <b>"render"</b> event
end note
note left of MVPView::templateOfRemoving
  Just template with empty result for removing
end note
@enduml