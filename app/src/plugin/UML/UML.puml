@startuml
class EventManagerMixin<TEvents extends IsolatedEvents> {
    #_eventHandlers: { [key: string]: ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<any>[]; }
    +on(eventName: TEventType, eventHandler: ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<TEvents[TEventType]>): this
    +off(eventName: TEventType, eventHandler: ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<TEvents[TEventType]>): this
    +trigger(eventName: TEventType, details: TEvents[TEventType]): this
    +handleEvent(event: Event): TThis
}
abstract class AbstractView<TOptions extends Required<Record<string, unknown>>, TState extends Required<Record<string, unknown>>, TEvents extends AbstractViewEvents> extends EventManagerMixin {
    +{abstract} template: Template
    #_options: TOptions
    #_state: TState
    +set(options: TOptions, state: TState): this
    #_setOptions(options: TOptions): TOptions
    #_setState(state: TState): TState
}
class TrackView extends AbstractView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }, innerHTML?: TemplateResult | TemplateResult[]) => TemplateResult
}
class RangeView extends AbstractView {
    +template: ({ classInfo, styleInfo, attributes, }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
}
class ThumbView extends AbstractView {
    +template: ({ classInfo, styleInfo, attributes }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }, { innerHTML, isActive, }?: { innerHTML: TemplateResult | TemplateResult[]; isActive: boolean; }) => TemplateResult
    #onDragstart(): boolean
    #{static} ariaAttributePrecision: number
}
class TooltipView extends AbstractView {
    +template: ({ classInfo, styleInfo, attributes, }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
}
class PipsView extends AbstractView {
    +template: ({ classInfo, styleInfo, attributes, }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
    #_getPipsRender(): TemplateResult | TemplateResult[]
    #_getMarkersRender(end: number, range: number, positionKey: "top" | "left"): TemplateResult[]
    #_getValueRender(styleInfo: StyleInfo, value: { percent: number; value: number; }): TemplateResult
    #_valuePipEventListenerObject: { handleValuePipClick: (value: Unpacked<PipsViewOptions['values']>, event: PipsViewDOMEvents['click']) => void; }
}
abstract class RangeSliderAbstractView extends AbstractView {
    #{abstract} _toTrackViewOptions(): TrackViewOptions
    #{abstract} _toRangeViewOptions(index: number): RangeViewOptions
    #{abstract} _toTooltipViewOptions(index: number): TooltipViewOptions
    #{abstract} _toPipsViewOptions(): PipsViewOptions
    #{abstract} _toThumbViewState(index: number): ThumbViewState
    #{abstract} _toTooltipViewState(index: number): TooltipViewState
}
class RangeSliderView extends RangeSliderAbstractView {
    +template: ({ classInfo, styleInfo, attributes, }?: { classInfo?: {} | undefined; styleInfo?: {} | undefined; attributes?: {} | undefined; }) => TemplateResult
    #_toTrackViewOptions(): TrackViewOptions
    #_toRangeViewOptions(index: number): RangeViewOptions
    #_toTooltipViewOptions(index: number): TooltipViewOptions
    #_toPipsViewOptions(): PipsViewOptions
    #_toPipsViewValuesOption(): { percent: number; value: number; }[]
    #_toThumbViewState(index: number): ThumbViewState
    #_toTooltipViewState(index: number): TooltipViewState
    #_getRangeTransform(index: number): string
    #_getThumbTransform(index: number): string
    #_getThumbTranslate(index: number): number
    #_getThumbZIndex(index: number): string
    #_thumbEventListenerObject: { cache: WeakMap<HTMLElement, { trackElem: HTMLElement; thumbElem: HTMLDivElement; thumbIndex: number; offsetPercent?: number | null | undefined; }>; handleEvent: (event: Event) => void; handleThumbPointerdown: (event: PointerEvent) => void; handleThumbPointermove: (event: PointerEvent) => void; handleThumbLostpoint...
    #_trackEventListenerObject: { cache: { trackElem: HTMLElement; }; handleEvent: (event: Event) => void; handleTrackClick: (event: PointerEvent) => void; }
    #_pipsEventListenerObject: { cache: {}; handleEvent: (event: Event) => void; handlePipsClick: (event: PipsViewDOMEvents['click']) => void; }
    #_getCursorPercentOnTrack(trackElem: HTMLElement, event: PointerEvent): number
    #_getAllowedThumbMovingPercent(desiredPercent: number, thumbIndex: number): number
    #_getNearestThumb(linearPercent: number): number
    #_findExactValue(newPercent: number, __1?: { findNearest?: { currentPercent: number; } | undefined; }): number
    #_findIntervalIndex(percent: number): number
    #_getStepValues(intervalIndex: number): number[] | "none"
    #_toPercent(value: number): number
    #_toValue(percent: number): number
    #_getValueBorder(): { min: number; max: number; }
    #{static} _getIntervalKeyAsNumber(key: string | number): number
    #{static} _findNewSteppedValue(currentValue: number, newValue: number, stepValue: number, nextStepValue: number): number
    #{static} _findNearestSteppedValue(newValue: number, stepValue: number, nextStepValue: number): number
}
interface IFacadeModel<State extends Record<string, unknown>> {
    +getState(): Promise<State>
    +setState(state?: State | undefined): Promise<this>
    +whenStateIsChanged(callback: (state: State) => void): void
    +closeConnections(): this
}
interface IRangeSliderFacadeModel extends IFacadeModel
abstract class AbstractPresentationModel<TOptions extends Record<string, unknown>, TNormalizedOptions extends Required<TOptions>, TState extends Record<string, unknown>, TFacadeModel extends IFacadeModel<Partial<TState>>> extends EventManagerMixin {
    #_options: TNormalizedOptions
    #_state: Required<TState>
    #_theOrderOfIteratingThroughTheOptions: Extract<keyof TOptions, string>[]
    #_theOrderOfIteratingThroughTheState: Extract<keyof TState, string>[]
    #_optionsShouldBeFixed: Extract<keyof TOptions, string>[]
    #_stateShouldBeFixed: Extract<keyof TState, string>[]
    #_facadeModel: TFacadeModel | null
    +getOptions(): TNormalizedOptions
    +setOptions(options?: Partial<TOptions> | undefined): this
    +getState(): Required<TState>
    +setState(state?: Partial<TState> | undefined): this
    +setFacadeModel(model: TFacadeModel): Promise<Partial<TState>>
    +sendState(): this
    #_validate(options: TOptions, state: Required<TState>): { validOptions: TOptions & TNormalizedOptions; validState: Required<TState>; }
    #_validateOptions(options: TOptions): TOptions & TNormalizedOptions
    #_validateState(options: TNormalizedOptions, state: Required<TState>): Required<TState>
    #_emitSet(): this
    #_bindFacadeModelListeners(): void
    #_facadeModelEventListenerObject: { handleFacadeModelChange: (state: Partial<TState>) => void; }
    #_eachSelf(sortedKeys: TKeys, prefix: string, postfix: string, callback: (key: TKeys[number], methodName: string) => unknown): this
    #{static} _getSortedKeys(required: TRequiredRecord, orderProvider: Extract<keyof TRequiredRecord, string>[], partial?: TPartialRecord | undefined): string[]
    #{static} _sortKeys(keys: TKeys, orderProvider: string[]): TKeys[number][]
}
abstract class RangeSliderAbstractPresentationModel extends AbstractPresentationModel {
    #_getIntervalsOption(): { [x: string]: number; min: number; max: number; }
    #_getStartOption(): number[]
    #_getStepsOption(): (number | "none")[]
    #_getConnectOption(): boolean[]
    #_getOrientationOption(): "horizontal" | "vertical"
    #_getPaddingOption(): [number, number]
    #_getFormatterOption(): Formatter
    #_getTooltipsOption(): (boolean | Formatter)[]
    #_getPipsOption(): any
    +setOptions(options?: RangeSliderPresentationModelOptions | undefined): this
    #_setIntervalsOption(intervals?: { [key: string]: number; min: number; max: number; } | undefined): this
    #_setStartOption(start?: number | number[] | undefined): this
    #_setStepsOption(steps?: number | "none" | (number | "none")[] | undefined): this
    #_setConnectOption(connect?: boolean | boolean[] | undefined): this
    #_setOrientationOption(orientation?: "horizontal" | "vertical" | undefined): this
    #_setPaddingOption(padding?: number | [leftPad: number, rightPad: number] | undefined): this
    #_setFormatterOption(formatter?: Formatter | undefined): this
    #_setTooltipsOption(tooltips?: boolean | (boolean | Formatter)[] | undefined): this
    #_setPipsOption(pips?: { mode?: Mode | undefined; values?: number | number[] | undefined; density?: number | undefined; isHidden?: boolean | undefined; } | undefined): this
    #_getValueState(): number[]
    #_getThumbsState(): { isActive: boolean; }[]
    #_setValueState(value?: number[]): this
    #_setThumbsState(thumbs?: { isActive: boolean; }[] | undefined): this
    #{abstract} _fixIntervalsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixStartOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixStepsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixConnectOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixPaddingOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixTooltipsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixPipsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....
    #{abstract} _fixValueState(options: RangeSliderPresentationModelNormalizedOptions, state: { value: number[]; thumbs: { isActive: boolean; }[]; }): { value: number[]; thumbs: { isActive: boolean; }[]; }
    #{abstract} _fixThumbsState(options: RangeSliderPresentationModelNormalizedOptions, state: { value: number[]; thumbs: { isActive: boolean; }[]; }): { value: number[]; thumbs: { isActive: boolean; }[]; }
}
class RangeSliderMainPresentationModel extends RangeSliderAbstractPresentationModel {
    #_fixIntervalsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [key: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: {...
    #_fixOrderOfIntervalsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [key: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: {...
    #_fixKeysOfIntervalsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [key: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: {...
    #_fixValuesOfIntervalsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { intervals: { [key: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: {...
    #_fixStartOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { start: number[]; intervals: { [x: string]: number; min: number; max: number; }; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: (number | [leftPad: ...]) & [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[];...
    #_fixStepsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { steps: (number | "none")[]; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: (number | [leftPad: ...]) & [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ...
    #_fixLengthOfStepsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { steps: (number | "none")[]; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: (number | [leftPad: ...]) & [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ...
    #_fixValuesOfStepsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { steps: (number | "none")[]; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: (number | [leftPad: ...]) & [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ...
    #_fixConnectOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { connect: any[]; intervals: { [x: string]: number; min: number; max: number; }; start: (number | number[]) & number[]; steps: number | "none" | (number | "none")[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { .....
    #_fixPaddingOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { padding: [number, number]; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ...; }; }
    #_fixTooltipsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { tooltips: any[]; intervals: { [x: string]: number; min: number; max: number; }; start: (number | number[]) & number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; pips: { ...; }; }
    #_fixPipsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { density: number; mode: Mode; values: number | number[]; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixPipsOptionDependOnMode(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { values: number[]; mode: Mode; density: number; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; } | { ...; }
    #_fixPipsOptionWithIntervalsMode(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { values: number[]; mode: Mode; density: number; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixPipsOptionWithCountMode(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { values: number; mode: Mode; density: number; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixPipsOptionWithPositionsMode(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { values: number[]; mode: Mode; density: number; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixPipsOptionWithValuesMode(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { values: number[]; mode: Mode; density: number; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixPipsValuesOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { values: number | number[]; mode: Mode; density: number; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixPipsDensityOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { pips: { density: number; mode: Mode; values: number | number[]; isHidden: boolean; }; intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; ... 4 more ...; tooltips: boolean | (boolean | Formatter)[]; }
    #_fixValueState(options: RangeSliderPresentationModelNormalizedOptions, state: { value: number[]; thumbs: { isActive: boolean; }[]; }): { value: number[]; thumbs: { isActive: boolean; }[]; }
    #_fixThumbsState(options: RangeSliderPresentationModelNormalizedOptions, state: { value: number[]; thumbs: { isActive: boolean; }[]; }): { thumbs: { isActive: boolean; }[]; value: number[]; }
    #{static} _intervalsKeysCompareFunc(a: string, b: string): number
    #{static} _getSortedKeysOfIntervalsOption(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): string[]
    #{static} _getValueBorder(options: { intervals: { [x: string]: number; min: number; max: number; }; start: number | number[]; steps: number | "none" | (number | "none")[]; connect: boolean | boolean[]; orientation: "horizontal" | "vertical"; padding: number | [leftPad: ...]; formatter: Formatter; tooltips: boolean | (boolean | Formatter)[]; pips: { ....): { min: number; max: number; }
}
abstract class AbstractPresenter<TView extends AbstractView<Record<string, unknown>, Record<string, unknown>, AbstractViewEvents>, TModel extends AbstractPresentationModel<Record<string, unknown>, Record<string, unknown>, Record<string, unknown>, IFacadeModel<Record<string, unknown>>>> {
    #_container: HTMLElement | DocumentFragment
    #_view: TView
    #_model: TModel
    +setView(view: TView): this
    +setModel(model: TModel): this
    +clearContainer(): this
    #_bindModelWithView(): void
    #_updateViewDisplay(): this
    #_initModelViewBinding(): this
    #_removeModelViewBinding(): this
    #handleModelSet: () => void
}
class RangeSliderPresenter extends AbstractPresenter {
    #_initModelViewBinding(): this
    #_removeModelViewBinding(): this
    #handleViewStart(details: { thumbIndex: number; }): void
    #handleViewSlide(details: { thumbIndex: number; newValue: number; }): void
    #handleViewEnd(details: { thumbIndex: number; }): void
    #handelViewSet(): void
}
interface IRangeSliderPluginFacadeModel extends IRangeSliderFacadeModel
class RangeSliderPlugin {
    #view: RangeSliderView
    #model: RangeSliderMainPresentationModel
    #presenter: RangeSliderPresenter
    +getOptions(): RangeSliderPresentationModelNormalizedOptions
    +setOptions(options?: RangeSliderPresentationModelOptions | undefined): this
    +setFacadeModel(model: IRangeSliderPluginFacadeModel): Promise<Partial<RangeSliderPresentationModelState>>
    +get(): number[]
    +set(value?: number | number[] | undefined): this
    +on(eventName: "start" | "slide" | "end" | "update" | "change" | "set" | "response" | "render", eventHandler: ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<{} | { thumbIndex: number; } | { thumbIndex: number; newValue: number; } | { thumbIndex: number; }> | ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<...>): this
    +off(eventName: "start" | "slide" | "end" | "update" | "change" | "set" | "response" | "render", eventHandler: ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<{} | { thumbIndex: number; } | { thumbIndex: number; newValue: number; } | { thumbIndex: number; }> | ListenerOfIsolatedEventOrListenerObjectOfIsolatedEvent<...>): this
    +remove(): this
}
RangeSliderView "1" --* "1" TrackView : composes template using template of >
RangeSliderView "1" --* "*" RangeView : composes template using templates of >
RangeSliderView "1" --* "*" ThumbView : composes template using templates of >
RangeSliderView "1" --* "*" TooltipView : composes template using templates of >
RangeSliderView "1" --* "1" PipsView : composes template using template of >
RangeSliderPresenter "1" --o "1" RangeSliderAbstractPresentationModel : gets/sets data, listens events that data have been updated
RangeSliderPresenter "1" --o "1" RangeSliderAbstractView : supplies data (updates), gets template for rendering, listens events that user has interacted
RangeSliderAbstractPresentationModel "1" ..> "1" RangeSliderPresenter : update notifications (after validation, server response, manual calls from code)
RangeSliderAbstractView "1" ..> "1" RangeSliderPresenter : user actions
RangeSliderAbstractPresentationModel "1" --> "1" IRangeSliderFacadeModel
RangeSliderPlugin "1" --* "1" RangeSliderView 
RangeSliderPlugin "1" --* "1" RangeSliderMainPresentationModel
RangeSliderPlugin "1" --* "1" RangeSliderPresenter
RangeSliderPlugin "1" --> "1" IRangeSliderPluginFacadeModel
@enduml